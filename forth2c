#!/usr/bin/python
# This is a FORTH to C compiler, handling only a subset of FORTH.
# Modified from <http://yosefk.com/blog/c-as-an-intermediate-language.html>
halp="""\
forth2c: a Forth to C compiler for a (very) limited subset of Forth.

For how the system works, consult the article:

http://yosefk.com/blog/c-as-an-intermediate-language.html

This transpiler requires understanding the Forth runtime environment
provided in the 'forth_runtime.h' header.

Options:

    -h          Print this help message and exit.
    -o  FILE    Change the output file from the default.
    -l          Turn line numbers on in generated C output.
    -e  NAME    Set the name of the entry point
    -s  SIZE    Set the size of the stack/memory
    -m          Turn on defining 'main()' in generated C code

Returns non-zero on failure.
"""

import sys, getopt

special = { # "special" words - can't emit S=WORD(S)
  ':':'',
  ';':'return CHK(F,S); }',
  'exit':'return CHK(F,S);',
  'cell':'S = PUSH(F,S,sizeof(DATA));',
  'begin':'do {',
  'again':'} while(1);',
  'until':'} while(!*S++);',
  'repeat':'} while(1);',
  'while':'if(!*S++) break;',
  'if':'if(*S++) {',
  'else':'} else {',
  'then':'}',
  'for':'for(DATA LABEL() = *S++; LABEL() > 0; LABEL()--){\n', # LABEL macro uses '__LINE__'
  'next':'}',
}

binops='+ - * / = < > mod and or xor lshift rshift'.split() # binary operators
op2c={'=':'==','mod':'%','and':'&','or':'|','xor':'^','lshift':'<<','rshift':'>>'}

def mangle(s):
  m={'.':'PRINT',',':'COMMA','!':'STORE','@':'LOAD','#':'HASH','+':'PLUS','-':'MINUS','0':'ZERO','1':'ONE','2':'TWO'}
  r=""
  for c in s:
    if c in m:
      r += m[c]
    else:
      r += c
  return r

var={'h0':0,'sp0': 1,'argc':2,'argv':3,'v0':4}
nvars = len(var)

def forth2c(inf,out,lndir,entry):
  global nvars
  last = ""
  n = 0
  for line in inf:
    n += 1
    if lndir: # emit line info for C tools (debuggers, etc.) - a nice option C gives us
      print >> out,'\n#line',n,'"%s"'%infile
    for token in line.lower().strip().split():
      mangled = mangle(token)
      if token == '\\':
          break
      elif token == 'recurse':
        print >> out,'S=%s(F, S);'%mangle(last)
      elif token in special:
        print >> out,special[token],
      else:
        try:
          num = int(token)
          print >> out, 'S = PUSH(F,S,%dll);'%num,
        except ValueError:
          if token in binops:
            print >> out,'S = OP2(F,S,%s);'%op2c.get(token,token),
          else:
            if defining:
              static = 'static'
              if token == entry:
                static = ' '
              print >> out,'%s DATA* '%static+mangled+'(FORTH *F, DATA *S) { CHK(F,S);',
              last = token
            elif variable:
              var[token] = nvars
              nvars += 1
            else: # call
              if token in var:
                print >> out,'S = PUSH(F,S,(DATA)&(F->stack[%d]'%var[token]+'/* %s */));'%token,
              elif token != 'variable':
                print >> out,'S=%s(F,S);'%mangled,
      defining = token == ':'
      variable = token == 'variable'

outfile='forth_program.c'
entry='cold'
lndir=0
defmain=0
size=4096
optlist, args = getopt.getopt(sys.argv[1:], "ho:le:s:m")

for o, a in optlist:
  if o == '-h':
    print halp
    sys.exit()
  elif o == '-o':
    outfile = a
  elif o == '-l':
    lndir = 1
  elif o == '-e':
    entry = a
  elif o == '-m':
    defmain = 1
  elif o == '-s':
    size = a
  else:
    assert False, "invalid option"

out = open(outfile,'w')
print >> out, '#define FORTH_ENTRY_POINT %s'%entry
print >> out, '#define FORTH_SIZE %d'%size
print >> out, '#include "forth_runtime.h"\n'
for infile in args:
  forth2c(open(infile),out,lndir,entry)
print >> out, "int main(int argc, char **argv) { return FORTH_MAIN(argc, argv, %d * sizeof(DATA)); }"%nvars

